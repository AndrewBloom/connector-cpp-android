diff --git a/cdk/cmake/DepFindProtobuf.cmake b/cdk/cmake/DepFindProtobuf.cmake
index 1fc785e3..e7894add 100644
--- a/cdk/cmake/DepFindProtobuf.cmake
+++ b/cdk/cmake/DepFindProtobuf.cmake
@@ -62,8 +62,12 @@ endif()
 add_ext_targets(protobuf
   LIBRARY protobuf-lite pb_libprotobuf-lite
   LIBRARY protobuf pb_libprotobuf
+)
+if (NOT CMAKE_CROSSCOMPILING)
+add_ext_targets(protobuf
   EXECUTABLE protoc pb_protoc
 )
+endif()
 
 
 # Standard PROTOBUF_GENERATE_CPP modified to our usage
@@ -77,6 +81,12 @@ function(mysqlx_protobuf_generate_cpp SRCS HDRS)
   SET(srcs)
   SET(hdrs)
 
+  if (NOT CMAKE_CROSSCOMPILING)
+    set(PROTOC_CMD ext::protoc)
+  else()
+    set (PROTOC_CMD ${WITH_PROTOC})
+  endif()
+
   FOREACH(FIL ${ARGN})
     GET_FILENAME_COMPONENT(ABS_FIL ${FIL} ABSOLUTE)
     GET_FILENAME_COMPONENT(FIL_WE ${FIL} NAME_WE)
@@ -90,7 +100,7 @@ function(mysqlx_protobuf_generate_cpp SRCS HDRS)
       "${CMAKE_CURRENT_BINARY_DIR}/protobuf/${FIL_WE}.pb.h"
       COMMAND ${CMAKE_COMMAND}
       -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/protobuf"
-      COMMAND ext::protoc
+      COMMAND ${PROTOC_CMD}
       ARGS --cpp_out "${CMAKE_CURRENT_BINARY_DIR}/protobuf"
       -I ${ABS_PATH} ${ABS_FIL}
 
diff --git a/cdk/extra/protobuf/CMakeLists.txt b/cdk/extra/protobuf/CMakeLists.txt
index adc19f55..9ace09fd 100644
--- a/cdk/extra/protobuf/CMakeLists.txt
+++ b/cdk/extra/protobuf/CMakeLists.txt
@@ -56,7 +56,6 @@
 # - disable installation script
 # - fix minor compilation issues on SunPro 5.14.0
 
-
 cmake_minimum_required(VERSION 3.1)
 PROJECT(Protobuf)
 
@@ -127,4 +126,6 @@ endmacro()
 
 pb_export(libprotobuf-lite)
 pb_export(libprotobuf)
-pb_export(protoc)
+if (NOT CMAKE_CROSSCOMPILING)
+  pb_export(protoc)
+endif()
diff --git a/cdk/extra/protobuf/protobuf-3.19.6/cmake/CMakeLists.txt b/cdk/extra/protobuf/protobuf-3.19.6/cmake/CMakeLists.txt
index f45f5a92..b193ceaf 100644
--- a/cdk/extra/protobuf/protobuf-3.19.6/cmake/CMakeLists.txt
+++ b/cdk/extra/protobuf/protobuf-3.19.6/cmake/CMakeLists.txt
@@ -47,8 +47,12 @@ endif()
 option(protobuf_BUILD_TESTS "Build tests" ON)
 option(protobuf_BUILD_CONFORMANCE "Build conformance tests" OFF)
 option(protobuf_BUILD_EXAMPLES "Build examples" OFF)
-option(protobuf_BUILD_PROTOC_BINARIES "Build libprotoc and protoc compiler" ON)
-option(protobuf_BUILD_LIBPROTOC "Build libprotoc" OFF)
+if (NOT CMAKE_CROSSCOMPILING)
+  option(protobuf_BUILD_PROTOC_BINARIES "Build libprotoc and protoc compiler" ON)
+else()
+  option(protobuf_BUILD_PROTOC_BINARIES "Build libprotoc and protoc compiler" OFF)
+  option(protobuf_BUILD_LIBPROTOC "Build libprotoc" ON)
+endif()
 option(protobuf_DISABLE_RTTI "Remove runtime type information in the binaries" OFF)
 if (BUILD_SHARED_LIBS)
   set(protobuf_BUILD_SHARED_LIBS_DEFAULT ON)
diff --git a/cdk/foundation/socket_detail.cc b/cdk/foundation/socket_detail.cc
index ffea5d61..19e15c75 100644
--- a/cdk/foundation/socket_detail.cc
+++ b/cdk/foundation/socket_detail.cc
@@ -56,6 +56,9 @@ PUSH_SYS_WARNINGS_CDK
 #include <windns.h>
 #pragma comment(lib,"Dnsapi")
 #endif
+#ifdef __ANDROID__
+#include <android/multinetwork.h>
+#endif
 POP_SYS_WARNINGS_CDK
 
 using namespace std::chrono;
@@ -1090,6 +1093,60 @@ std::forward_list<Srv_host_detail> srv_list(const std::string &hostname)
   }
   return srv;
 }
+#elif defined(__ANDROID__)
+
+std::forward_list<Srv_host_detail> srv_list(const std::string &hostname)
+{
+  net_handle_t network = NETWORK_UNSPECIFIED;  // Use default network
+  using Srv_list = std::forward_list<Srv_host_detail>;
+  Srv_list srv;
+  Srv_list::const_iterator srv_it = srv.before_begin();
+
+  // Perform DNS SRV query using Android's native networking API
+  int query_fd = android_res_nquery(network, hostname.c_str(), ns_c_in, ns_t_srv, 0);
+  if (query_fd > 0) {
+    // Allocate buffer for DNS response
+    unsigned char query_buffer[NS_PACKETSZ];
+    int rcode;
+
+    // Retrieve query result from file descriptor
+    int res = android_res_nresult(query_fd, &rcode, query_buffer, sizeof(query_buffer));
+    if (res > 0) {
+      ns_msg msg;
+      char name_buffer[NS_MAXDNAME];
+      Srv_host_detail host_data;
+      ns_initparse(query_buffer, res, &msg);
+
+      auto process = [&msg, &name_buffer, &host_data, &srv, &srv_it](const ns_rr &rr) -> void
+      {
+        const unsigned char* srv_data = ns_rr_rdata(rr);
+
+        //Each NS_GET16 call moves srv_data to next value
+        NS_GET16(host_data.prio, srv_data);
+        NS_GET16(host_data.weight, srv_data);
+        NS_GET16(host_data.port, srv_data);
+
+        dn_expand(ns_msg_base(msg), ns_msg_end(msg),
+                  srv_data, name_buffer, sizeof(name_buffer));
+
+        host_data.name = name_buffer;
+
+        srv_it = srv.emplace_after(
+                   srv_it,
+                   std::move(host_data));
+        };
+
+        for(int x= 0; x < ns_msg_count(msg, ns_s_an); x++)
+        {
+              ns_rr rr;
+              ns_parserr(&msg, ns_s_an, x, &rr);
+              process(rr);
+        }
+    }
+  }
+  return srv;
+}
+
 #else
 
 std::forward_list<Srv_host_detail> srv_list(const std::string &hostname)
